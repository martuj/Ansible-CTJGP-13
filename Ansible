Ansible Lab Steps
=================
Login to AWS Console

################################################
Lab 1: Installation and Configuration of Ansible
################################################

# Launch instance RHEL 9 machine in us-east-1. Choose t2.micro. In security group, 
# allow SSH (22) and HTTP (80) for all incoming traffic. Add Tag Name: Ansible-ControlNode

# Once the EC2 is up & running, SSH into one of it and set the hostname as 'Control-Node'. 
sudo hostnamectl set-hostname Control-Node
# Now you can exit and login again. It will show the new hostname.
# or you can type 'bash' and open another shell which shows new hostname.

# Update the package repository with latest available versions
sudo yum check-update

# Install latest version of Python. 
sudo yum install python3-pip wget
python3 --version
sudo pip3 install --upgrade pip

#######################################################################################
Lab 9: Implementing Jinja2 Templates
######################################################################################
  mkdir templates
  cd templates

#Create a template file as below

vi new-motd.j2

System information is as below
Operatingsystem: '{{ operatingsystem }}'
Architecture: '{{ architecture }}'
DistributionVersion: '{{ distribution }}'


# Create a playbook to implement jinja templates

vi implement-jinja2.yml

---
- hosts: all
  become: yes
  vars:
      operatingsystem: RedHat
      architecture: x64
      distribution: 8.0
  tasks:
    - template:
         src: new-motd.j2
         dest: /etc/motd
         owner: ec2-user
         group: ec2-user
         mode: 0644

 #Now execute the playbook 

$ ansible-playbook implement-jinja2.yml -b 

 

#Now we will check what our template is exactly doing, where it is putting the values.
#For that, do the following:

$ ansible all -m shell -a "cat /etc/motd"

# Install awscli, boto, boto3 and ansible
# Boto/Boto3 are AWS SDK which will be needed while accessing AWS APIs
sudo pip3 install awscli boto boto3
sudo pip3 install ansible==4.10.0

pip show ansible

aws configure
add AWS access key 
&
AWS secret Access key

******Create the Playbook for creating managed nodes*********
 vi ec2-playbook.yml

---
- hosts: localhost
  connection: local

  tasks:
    - name: Execute curl command to get token
      shell: "curl -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 21600'"
      register: TOKEN

    - name: Get region of instance
      shell: "curl -H 'X-aws-ec2-metadata-token:{{ TOKEN.stdout }}' http://169.254.169.254/latest/meta-data/placement/region/"
      register: region

    - name: Get AMI ID of instance
      shell: "curl -H 'X-aws-ec2-metadata-token:{{ TOKEN.stdout }}' http://169.254.169.254/latest/meta-data/ami-id"
      register: ami_id

    - name: Get keypair of instance
      shell: "curl -H 'X-aws-ec2-metadata-token:{{ TOKEN.stdout }}' http://169.254.169.254/latest/meta-data/public-keys/| cut -c 3-100 "
      register: kp

    - name: Get Instance Type of instance
      shell: "curl -H 'X-aws-ec2-metadata-token:{{ TOKEN.stdout }}' http://169.254.169.254/latest/meta-data/instance-type"
      register: instance_type


    - name: Get subnet id of instance
      shell: "curl -H 'X-aws-ec2-metadata-token:{{ TOKEN.stdout }}' -v http://169.254.169.254/latest/meta-data/network/interfaces/macs/$(curl -H 'X-aws-ec2-metadata-token:{{ TOKEN.stdout }}' -v http://169.254.169.254/latest/meta-data/network/interfaces/macs)/subnet-id"
      register: subnet

    - name: Get security group of instance
      shell: "curl -H 'X-aws-ec2-metadata-token:{{ TOKEN.stdout }}' -v http://169.254.169.254/latest/meta-data/network/interfaces/macs/$(curl -H 'X-aws-ec2-metadata-token:{{ TOKEN.stdout }}' -v http://169.254.169.254/latest/meta-data/network/interfaces/macs)/security-group-ids/"
      register: secgrp


    - name: Generate SSH keypair
      openssh_keypair:
        force: yes
        path: /home/ec2-user/.ssh/id_rsa

    - name: Get the public key
      shell: cat /home/ec2-user/.ssh/id_rsa.pub
      register: pubkey

    - name: Create EC2 instance
      ec2:
        key_name: "{{ kp.stdout }}"
        group_id: "{{ secgrp.stdout }}"
        instance_type: "{{ instance_type.stdout }}"
        image: "{{ ami_id.stdout }}"         # "ami-0931978297f275f71"
        wait: true
        region: "{{ region.stdout }}"
        instance_tags:
          Name: "{{ item }}"
        vpc_subnet_id: "{{ subnet.stdout }}"
        assign_public_ip: yes
        user_data: |
           #!/bin/bash
           echo "{{ pubkey.stdout }}" >> /home/ec2-user/.ssh/authorized_keys
      register: ec2var
      loop:
          - managed-node-1
          - managed-node-2

    - name: Make ansible directory
      file:
        path: /etc/ansible
        state: directory
      become: yes

    - debug:
        msg: "{{ ec2var.results[0].instances[0].private_ip }}"

    - debug:
        msg: "{{ ec2var.results[1].instances[0].private_ip }}"


save the file

ansible-playbook ec2-playbook.yml



# Once you get the ip addresses, do the following:
sudo vi /etc/ansible/hosts

# Add the prive IP addresses, by pressing "INSERT" 
node1 ansible_ssh_host=node1-private-ip ansible_ssh_user=ec2-user
node2 ansible_ssh_host=node2-private-ip ansible_ssh_user=ec2-user

e.g. node1 ansible_ssh_host=172.31.14.113 ansible_ssh_user=ec2-user
     node2 ansible_ssh_host=172.31.2.229 ansible_ssh_user=ec2-user


# Save the file using "ESCAPE + :wq!"

# list all managed node ip addresses.
ansible all --list-hosts

# SSH into each of them and set the hostnames.
ssh ec2-user@< Replace Node 1 IP >
sudo hostnamectl set-hostname managed-node-1
exit

ssh ec2-user@< Replace Node 2 IP >
sudo hostnamectl set-hostname managed-node-2
exit

# Use ping module to check if the managed nodes are able to interpret the ansible modules
ansible all -m ping

################################
Lab 2: Exploring Ad-Hoc Commands
################################

sudo vi /etc/ansible/hosts

# Add the given line, by pressing "INSERT" 
# add localhost and add the connection as local so that it wont try to use ssh
localhost ansible_connection=local
# save the file using "ESCAPE + :wq!"

# In real life situations, one of the managed node may be used as the ansible control node.
# In such cases, we can make it a managed node, by adding localhost in hosts inventory file.


# get memory details of the hosts using the below ad-hoc command
ansible all -m command -a "free -h"
OR
ansible all -a "free -h"

# Create a user ansible-new in the 2 nodes + the control node
# This creates the new user and the home directory /home/ansible-new
ansible all -m user -a "name=ansible-new" --become

# lists all users in the machine. Check if ansible-new is present in the managed nodes / localhost
ansible node1 -a "cat /etc/passwd"

# List all directories in /home. Ensure that directory 'ansible-new' is present in /home. 
ansible node2 -a "ls /home"


# Change the permission mode from '700' to '755' for the new home directory created for ansible-new
ansible node1 -m file -a "dest=/home/ansible-new mode=755" --become


# Check if the permissions got changed
ansible node1 -a "sudo ls -l /home"


# Create a new file in the new dir in node 1
ansible node1 -m file -a "dest=/home/ansible-new/demo.txt mode=600 state=touch" --become


# Check if the permissions got changed
ansible node1 -a "sudo ls -l /home/ansible-new/"


# Add content into the file
ansible node1 -b -m lineinfile -a 'dest=/home/ansible-new/demo.txt line="This server is managed by Ansible"'


# check if the lines are added in demo.txt
ansible node1 -a "sudo cat /home/ansible-new/demo.txt"


# You can remove the line using parameter state=absent
ansible node1 -b -m lineinfile -a 'dest=/home/ansible-new/demo.txt line="This server is managed by Ansible" state=absent'

# check if the lines are removed from demo.txt
ansible node1 -b -a "sudo cat /home/ansible-new/demo.txt"

# Now copy a file from ansible-control node to host node 1
touch test.txt
echo "This file will be copied to managed node using copy module" >> test.txt

ansible node1 -m copy -a "src=test.txt dest=/home/ansible-new/test" -b
# --become can be replaced by -b

# check if the file got copied to managed node.
ansible node1 -b -a "sudo ls -l /home/ansible-new/test"

sudo vi /etc/ansible/hosts

# Remove the below line from hosts inventory file. 
localhost ansible_connection=local

# save the file using "ESCAPE + :wq!"

================================================================================
Playbook
-----------------
vi first.yml

---
- name: first play
  hosts: all
  become: yes
  tasks:
    - name: create a directory
      file:
        path: /test
        state: directory
    - name: create a new file
      file:
        path: demo.txt
        mode: 0664
        state: touch

 save it

ansible-playbook first.yml

ansible all -m command -a "ls -l"

===========================================================
--------------
Lab3:
--------------
vi install-apache.yml
---
- name: This play will install apache web servers on all the hosts
  hosts: all
  become: yes
  tasks:
    - name: Task1 will install httpd using yum
      yum:
        name: httpd
        update_cache: yes
        state: latest
    - name: Task2 will upload custom index.html into all hosts
      copy:
       src: "index.html"
       dest: "/var/www/html/index.html"
    - name: Task3 will setup attributes for file
      file:
        path: /var/www/html/index.html
        owner: apache
        group: apache
        mode:  0644
    - name: Task4 will start the httpd
      service:
        name: httpd
        state: started

save the file

vi index.html
<html>
  <body>
  <h1>Welcome to CloudThat</h1>
  <img src= "https://d3ffutjd2e35ce.cloudfront.net/assets/logo1.png" >
  </body>
</html>

save the file

# ansible-playbook install-apache.yml

 # curl 10.142.0.24     (private ip of vm)
 # curl 10.142.0.23
=================================================================
--------------
Lab4:
------------------
vi putfile.yml
---
- hosts: all
  become: yes
  tasks:
    - name: Creating a new user cloudthat
      user:
        name: cloudthat
    - name: Creating a directory for the new user
      file:
        path: /home/cloudthat/test
        state: directory

save the file

# ansible-playbook putfile.yml


# ansible all -m command -a "tail -n 2 /etc/passwd"
#  ansible all -m command -a "ls -l /home/cloudthat" -b    (-b is become root user)


Lab4a:

vi p2.yml
---
- hosts: all
  become: yes
  tasks:
    -   name: Creating a new user test
        user:
          name: test
    -   name: Creating a directory for the new user
        file:
          path: /home/test/demo
          state: directory
    -   name: creating a folder named ansible
        file:
          path: /home/test/ansible
          state: directory
    -   name: creating a file within the folder ansible
        file:
          path: /home/test/ansible/hello.txt
          state: touch
    -   name: Changing owner and group with permission for the file within the folder named ansible
        file:
          path: /home/test/ansible/hello.txt
          owner: root
          group: test
          mode: 0665
    -   name: adding a block of string to the file created named hello.txt
        blockinfile:
          path: /home/test/ansible/hello.txt
          block: |
            This is line 1
            This is line 2

save the file

# ansible-playbook p2.yml

#  ansible all -a "sudo cat /home/test/ansible/hello.txt"


Task 2: Uninstalling Apache Service
=========================================

vi service.yml
---
- hosts: all
  become: yes
  tasks:
   - name: uninstalling httpd
     yum:
        name: httpd
        state: absent
   - name: Downloading a file
     get_url:
        url: https://s3.ap-south-1.amazonaws.com/files.cloudthat.training/devops/ansible-essentials/sql_permissions.txt
        dest: /tmp/
   - name: Disable SElinux without using command and shell
     selinux:
        state: disabled

save the file

# ansible-playbook service.yml
# ansible all -m command -a "yum list httpd" -b
# ansible all -m command -a "ls -l /tmp" -b
# ansible all -m command -a "getenforce" -b

=====================================================

Lab 5: Implementing Ansible Variables

Task 1: Configuring packages in ansible using variables
--------------------------------

vi implement-vars.yml
---
- hosts: '{{ hostname }}'
  become: yes
  vars:
    hostname: all
    package1: httpd
    destination: /var/www/html/index.html
    source: /home/ec2-user/lab5/file/index.html  #control node path
  tasks:
    - name: Install defined package
      yum:
        name: '{{ package1 }}'
        update_cache: yes   # refresh the caches before applying whatever change is necessary
        state: latest
    - name: Start desired service
      service:
        name: '{{ package1 }}'
        state: started
    - name: copy required index.html to the document folder for httpd.
      copy:
        src: '{{ source }}'
        dest: '{{ destination }}'

save the file


vi index.html

<html>
  <body>
  <h1>Welcome to CloudThat</h1>
  <h1>Welcome to variables</h1>
  </body>
</html>

save the file

ansible-playbook implement-vars.yml


view page use the public ip address of the vm 


Task 2: Implementing ansible variables using extra-vars option
----------------------------------------
# create new file in the same location

vi index1.html
<html>
  <body>
  <h1>This is the alternate Home Page</h1>
  <img src= "https://d3ffutjd2e35ce.cloudfront.net/assets/logo1.png" >
  </body>
</html>

[ec2-user@ansible file]$ pwd
/home/ec2-user/lab5/file
[ec2-user@ansible file]$


# ansible-playbook implement-vars.yml --extra-vars "source=/home/ec2-user/lab5/file/index1.html"


Task 3: Configuring variables as a separate file and implementing ansible playbook
--------------------------------

vi implement-vars1.yml
---
- hosts: '{{ hostname }}'
  become: yes
  vars_files:
    - myvariables.yml
  tasks:
    - name: Install defined package
      yum:
        name: '{{ package1 }}'
        update_cache: yes
        state: latest
    - name: Start desired service
      service:
        name: '{{ package1 }}'
        state: started
    - name: copy required index.html to the document folder for httpd.
      copy:
        src: '{{ source }}'
        dest: '{{ destination }}'

save the file

vi myvariables.yml
---
hostname: all
package1: httpd
destination: /var/www/html/index.html
source: /home/ec2-user/lab5/file/index.html


save the file

vi index.html
<html>
  <body>
  <h1>Welcome to CloudThat</h1>
  <h1>Welcome to variables</h1>
  </body>
</html>

# ansible-playbook implement-vars1.yml
=========================================================
Lab 6 Task Inclusion
==============================
add the line in the inventory

vi /etc/ansible/hosts

localhost ansible_connection=local

save the file


vi first.yaml
---
- hosts: localhost
  gather_facts: no
  become: yes
  tasks:
  - name: install common packages
    yum:
      name: [wget, curl]
      state: present

  - name: inclue task for httpd installation
    include_tasks: second.yaml

save the file

vi second.yaml
---
  - name: install the httpd package
    yum:
      name: httpd
      state: latest
      update_cache: yes

  - name: start the httpd service
    service:
      name: httpd
      state: started
      enabled: yes

save the file

now  run the first file

# ansible-playbook first.yaml


vi third.yaml
---
- hosts: localhost
  gather_facts: no
  become: yes
  tasks:
  - name: install common packages
    yum:
      name: [wget, curl]
      state: present
    register: out

  - name: list result of previous task
    debug:
      msg: "{{ out.rc}}"

  - name: inclue task for httpd installation
    include_tasks: second.yaml
    when: out.rc == 0


Now run the third file

ansible-playbook third.yaml
=================================================================================
##########################################################################################
Lab 7: Implementing Ansible Vault
###########################################################################################
# Switch to labs directory inside /home/ec2-user
  cd ~/labs 


# Create a sample playbook using below.

  vi implement-vault.yml

---
- hosts: all
  tasks:
  - file:
        path: /home/ec2-user/test.conf
        state: touch
        owner: ec2-user
        group: ec2-user
        mode: 0644


  # Encrypt the playbook using vault using encrypt option
  ansible-vault encrypt implement-vault.yml


  # Verify that the playbook contents are encrypted
  cat implement-vault.yml



  # View the playbook contents (in plaintext) without decrypting by providing the password used for encryption
  ansible-vault view implement-vault.yml


 # To execute the playbook, you need to pass additional option (--ask-vault-pass) as below
  ansible-playbook --ask-vault-pass implement-vault.yml


  # To make any changes to the playbook without decrypting, use edit 
  ansible-vault edit implement-vault.yml
  

  # Execute the playbook with changes
  ansible-playbook --ask-vault-pass implement-vault.yml


  # Use rekey option to change the vault password
  ansible-vault rekey implement-vault.yml
  

  # Verify the playbook contents are encrypted
  cat implement-vault.yml


  # Decrypt the contents using decrypt option
  ansible-vault decrypt implement-vault.yml


  # Verify that playbook contents are visible in plain-text
  cat implement-vault.yml
===========================================================
Task 1: Loops with Ansible Playbook
=========================================================================


vi looplab.yml
---
- hosts: all
  become: yes
  tasks:
   - name: creating users
     user:
       name: "{{ item }}"
       state: present
     with_items:
      - userX
      - userY
      - userZ

# save the file using "ESCAPE + :wq!"

# Execute the playbook
$ ansible-playbook looplab.yml


#Verify if the users mentioned in the list were added by using an Ansible ad-hoc command
ansible all -a "tail -n 3 /etc/passwd"

==========================================================================================
Task 2: Tags with Ansible Playbooks
==========================================================================================
# Create and edit tagslabs.yml in the same labs directory 


vi tagslabs.yml
---
- hosts: all
  become: yes
  user: ec2-user
  connection: ssh
  gather_facts: no
  tasks:
    - name: Install telnet
      yum: pkg=telnet state=latest
      tags:
        - packages
    - name: Verifying telnet installation
      raw: yum list installed | grep telnet > /home/ec2-user/pkg.log
      tags:
        - logging



#save the file using "ESCAPE + :wq!"

#Execute the playbook
$ ansible-playbook tagslabs.yml

#Run the playbook again, this time using tags. Notice that only the tasks associated with the mentioned tags are running

$ ansible-playbook -t "logging" tagslabs.yml

$ ansible-playbook -t "packages" tagslabs.yml

=============================================================================================
Task 3: Prompts with Ansible Playbooks
=============================================================================================
#Create and edit promptlab.yml in the same labs directory 

$ vi promptlab.yml

---
- hosts: all
  become: yes
  user: ec2-user
  connection: ssh
  vars_prompt:
    - name: pkginstall
      prompt: Which package do you want to install?
      default: telnet
      private: no
  tasks:
    - name: Install the package specified
      yum: pkg={{ pkginstall }} state=latest


#save the file using "ESCAPE + :wq!"

#Execute the playbook & you will be prompt for enter the package name which you want to install
#If no package is mentioned, telnet is installed by default

$ ansible-playbook promptlab.yml

#Verify if the specified package httpd is installed. SSH into one of the machines and verify using the command 

$ ssh ec2-user@< managed_node_private_ip >

$ rpm -qa | grep httpd

ansible all -m "command" -a "rpm -qa | grep httpd"
================================================================================================
Task 4: Until function
================================================================================================

#Create and edit untillab.yml in the same labs directory 

$ vi untillab.yml

---
- hosts: all
  become: yes
  connection: ssh
  user: ec2-user
  tasks:
  - name: Install Apache Web Server
    yum:
       name: httpd
       state: latest
  - name: Verify Status of Service
    shell: systemctl status httpd
    register: result
    until: result.stdout.find("active (running)") != -1
    retries: 5
    delay: 10

#save the file using "ESCAPE + :wq!"

# Execute the playbook
#Notice the output of the command is shown along with the Ansible until command output

$ ansible-playbook untillab.yml

# Login to the managed node from another window and start the httpd service
# You can use the same key (as used for CN) to login to managed node 

$ ssh ec2-user@< managed_node_private_ip >
$ sudo service httpd start

# you can check the status of httpd by
$ sudo service httpd status

=============================================================================================
Task 5: Run Once with Ansible Playbook
=============================================================================================

#Create and edit rolab.yml in the same labs directory 

$ vi rolab.yml

---
- hosts: all
  become: yes
  user: ec2-user
  connection: ssh
  gather_facts: no
  tasks:
    - name: Recording uptime 
      raw: /usr/bin/uptime >> /home/ec2-user/uptime
      run_once: true

#save the file using "ESCAPE + :wq!"

# Execute the playbook
$ ansible-playbook rolab.yml

#Verify if the file exists and has the right contents on either of the client machines(manage nodes)
$ ansible all -a "cat /home/ec2-user/uptime"

#now open the file and edit parameter as run_once: false 
# Execute the playbook again
$ ansible-playbook rolab.yml

#Verify if the file exists and has the right contents on the client machines(manage nodes)
$ ansible all -a "cat /home/ec2-user/uptime"


==================================================================================================
Task 6: Blocks with Ansible Playbook
===================================================================================================

#Create and edit blklab.yml in the same labs directory 
#Notice that the “web_package” variable is an invalid package. Due to the invalid package in a block, tasks under rescue will run

$ vi blklab.yml

---
- hosts: all
  become: yes
  user: ec2-user
  connection: ssh
  gather_facts: no
  tasks:
    - block:
        - name: Install {{ web_package }} package
          yum:
            name: "{{ web_package }}"
            state: latest
      rescue:
        - name: Install {{ db_package }} package
          yum:
            name: "{{ db_package }}"
            state: latest
      always:
        - name: Start {{ db_service }} service
          service:
            name: "{{ db_service }}"
            state: started
  vars:
    web_package: http
    db_package: mariadb-server
    db_service: mariadb

#save the file using "ESCAPE + :wq!"

#Execute the playbook
#Block tasks fail and that Rescue tasks are running due to the failure of block tasks. The Always tasks run independently

$ ansible-playbook blklab.yml

#Now fix the package name in the Playbook (web_package: httpd) and run the Playbook again
$ ansible-playbook blklab.yml

#Notice that the tasks under rescue are not running as block tasks ran successfully.

#######################################################################################
Lab 9: Implementing Jinja2 Templates
######################################################################################
  mkdir templates
  cd templates

#Create a template file as below

vi new-motd.j2

System information is as below
Operatingsystem: '{{ operatingsystem }}'
Architecture: '{{ architecture }}'
DistributionVersion: '{{ distribution }}'


# Create a playbook to implement jinja templates

vi implement-jinja2.yml

---
- hosts: all
  become: yes
  vars:
      operatingsystem: RedHat
      architecture: x64
      distribution: 8.0
  tasks:
    - template:
         src: new-motd.j2
         dest: /etc/motd
         owner: ec2-user
         group: ec2-user
         mode: 0644

 #Now execute the playbook 

$ ansible-playbook implement-jinja2.yml -b 

 

#Now we will check what our template is exactly doing, where it is putting the values.
#For that, do the following:

$ ansible all -m shell -a "cat /etc/motd"

############################################################################################
Lab 10: Implementing Ansible Roles
############################################################################################

Task 1: Implementing Ansible Roles
====================================================================================

cd ~/

# Lets uninstall httpd. After that, we will use ansible role to install it.
$ ansible-playbook /home/ec2-user/ansible-labs/uninstall-apache-pb.yml (Please provide the correct path name)

# Install tree. A tree is a recursive directory listing program that produces a depth-indented listing of files. 

$ sudo yum install tree -y

# You can view your home directory structure in tree format with below command tree 
$ tree /home/ec2-user/ansible-labs

# Lets create the code for Role labs
$ cd ~/
$ mkdir role-labs && cd role-labs

mkdir role-labs;cd role-labs


#Now inside the roles directory, create two different directories for different roles, namely webrole and dbrole. Then switch to the directory dbrole and then create tasks directory inside dbrole


$ mkdir webrole dbrole && cd dbrole
$ mkdir tasks


#This main.yml is the playbook which will get executed to make an effect of this role and put the below content in the main.yml file

$ vi tasks/main.yml

---
- name: Install MariaDB server package
  yum: 
    name: mariadb-server 
    state: present
- name: Start MariaDB Service
  service: 
    name: mariadb 
    state: started 
    enabled: true

#save the file using "ESCAPE + :wq!"


#Now change your directory to webrole 

$ cd .. && cd webrole/
$ mkdir files tasks && cd files/
$ vi index.html

<html>
  <body>
  <h1>We are performing the Roles Lab</h1>
  <img src= "https://d3ffutjd2e35ce.cloudfront.net/assets/logo1.png">
  </body>
</html>

#save the file using "ESCAPE + :wq!"

#Then go to the task directory as below and create main.yml 

$ cd .. && cd tasks/
$ vi main.yml

# Add the given content, by pressing "INSERT" 

---
- name: install httpd
  yum: 
    name: httpd 
    update_cache: yes 
    state: latest

- name: uploading default index.html for host
  copy:
     src: /home/ec2-user/role-labs/webrole/files/index.html
     dest: /var/www/html

- name: Setting up attributes for file
  file:
    path:  /var/www/html/index.html
    owner: apache
    group: apache
    mode:  0644

- name: start httpd
  service:
    name=httpd 
    state=started


# save the file using "ESCAPE + :wq!"

#After the creation of this file, we are done with the complete hierarchy of roles, so we will have a look at how it is exactly using tree command

$ cd ../.. 
$ tree

#Now change the directory to ansible directory and create the playbook as implement-roles.yml

$ cd ..
$ vi implement-roles.yml

# Add the given content, by pressing "INSERT".
---
 - hosts: all
   become: yes 

   roles:
     - webrole
     - dbrole
     


# save the file using "ESCAPE + :wq!"

#Execute the playbook
$ ansible-playbook implement_roles.yml

# Check the home page on browser. (Public DNS)
# It will show the webpage with msg "We are performing the Roles Lab"

==========================================================================================
Task 2: Installing Java through Ansible Galaxy Roles galaxy
==========================================================================================

#Install java form ansible galaxy role from galaxy.ansible.com   

#Now Install the role 'geerlingguy.java' from ansible galaxy repository. 
$ ansible-galaxy install geerlingguy.java

#Now change into labs directory by running below command and create YAML file

$ cd /home/ec2-user/labs/

$ vi implement-java.yml

# Add the given content, by pressing "INSERT" 

---
 - hosts: all
   become: yes
   roles:
     - geerlingguy.java

# save the file using "ESCAPE + :wq!"

# Before running the playbook, check if java is installed in managed nodes.
ansible all -m command -a "java -version"
# you will get error

# execute playbook from the control node
$ ansible-playbook implement-java.yml

# Now, check if java is installed in managed nodes.
$ ansible all -a "java -version"

***********************************************************************************************************************************
Configuring HTTPS listener in Windows:
open powershell as administrator and follow the below step
Note: 1) below private ip address in the aws console you can get DNS name
       2) Once you run the 1st setp you will get the thumbprint copy that in the notepad 

Step1: Create Certificate
-New-SelfSignedCertificate -DnsName "DNS Name" -CertStoreLocation Cert:\LocalMachine\My
example:-
New-SelfSignedCertificate -DnsName "ec2-54-234-230-57.compute-1.amazonaws.com" -CertStoreLocation Cert:\LocalMachine\My

-Step2: add port in the security group as below
Whitelist port 5985(winrm-http) and 5986(winrm-https) in the security group of the the windows server.

-Step3: Create HTTPS Listener
winrm create winrm/config/Listener?Address=*+Transport=HTTPS '@{Hostname="DNS Name"; CertificateThumbprint="Thumbprint"}'
example:-
winrm create winrm/config/Listener?Address=*+Transport=HTTPS '@{Hostname="ec2-54-234-230-57.compute-1.amazonaws.com"; CertificateThumbprint="E58292FFF7F80A9799055F8C723CA0DEDD0715B1"}'


-Step4:Add  new firewall rule for 5986

netsh advfirewall firewall add rule name="Windows Remote Management (HTTPS-In)" dir=in action=allow protocol=TCP localport=5986

-Step5:Check the listener and make sure https listener is there.

winrm e winrm/config/Listener

- Check The Service

winrm get winrm/config

-Make sure the Basic Auth is set to true, if not then execute below commands.

Set-Item -Force WSMan:\localhost\Service\auth\Basic $true

==========================================================
On Ansible Control node
=================================
update the inventry file as following
==============================================
sudo vi /etc/ansible/hosts

windows ansible_host=172.31.44.232 ansible_password=EYsPYs&b5TPBrsNvVnpicc0o.VV?GCD& ansible_connection=winrm ansible_port=5986 ansible_user=administrator ansible_winrm_server_cert_validation=ignore ansible_winrm_transport=basic

save it

To ping from ansible control node to windows server
==============================================
 ansible windows -m win_ping

you will get the response..


